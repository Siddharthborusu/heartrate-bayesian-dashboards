{"version":3,"sources":["Dashboard.js","App.js","index.js"],"names":["Dashboard","data","setData","useState","modelPerformance","setModelPerformance","clinicalImplications","setClinicalImplications","riskFactors","setRiskFactors","useEffect","age","gender","cholesterol","bloodPressure","heartDiseaseRisk","smoking","diabetes","obesity","familyHistory","accuracy","precision","recall","f1Score","auc","aspect","impact","factor","prevalence","genderDistribution","reduce","acc","curr","genderDistributionData","Object","entries","map","_ref","count","GENDER_COLORS","Male","Female","modelPerformanceData","_ref2","metric","value","React","createElement","className","ResponsiveContainer","width","height","PieChart","Pie","cx","cy","labelLine","outerRadius","fill","dataKey","label","_ref3","percent","concat","toFixed","entry","index","Cell","key","Tooltip","Legend","ComposedChart","CartesianGrid","strokeDasharray","XAxis","YAxis","Area","type","stroke","Bar","barSize","Line","BarChart","RadarChart","PolarGrid","PolarAngleAxis","PolarRadiusAxis","angle","domain","Radar","name","fillOpacity","layout","App","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.4aaaa4a8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  PieChart, Pie, Cell, ComposedChart, Line, Area,\n  RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar\n} from 'recharts';\n\nconst Dashboard = () => {\n  const [data, setData] = useState([]);\n  const [modelPerformance, setModelPerformance] = useState({});\n  const [clinicalImplications, setClinicalImplications] = useState([]);\n  const [riskFactors, setRiskFactors] = useState([]);\n\n\n  useEffect(() => {\n\n    const simulatedData = [\n      { age: 25, gender: 'Male', cholesterol: 180, bloodPressure: 120, heartDiseaseRisk: 0.2, smoking: 'No', diabetes: 'No', obesity: 'No', familyHistory: 'No' },\n      { age: 35, gender: 'Female', cholesterol: 200, bloodPressure: 130, heartDiseaseRisk: 0.3, smoking: 'Yes', diabetes: 'No', obesity: 'Yes', familyHistory: 'No' },\n      { age: 45, gender: 'Male', cholesterol: 220, bloodPressure: 140, heartDiseaseRisk: 0.5, smoking: 'Yes', diabetes: 'Yes', obesity: 'No', familyHistory: 'Yes' },\n      { age: 55, gender: 'Female', cholesterol: 240, bloodPressure: 150, heartDiseaseRisk: 0.7, smoking: 'No', diabetes: 'Yes', obesity: 'Yes', familyHistory: 'Yes' },\n      { age: 65, gender: 'Male', cholesterol: 260, bloodPressure: 160, heartDiseaseRisk: 0.9, smoking: 'Yes', diabetes: 'Yes', obesity: 'Yes', familyHistory: 'Yes' },\n    ];\n    setData(simulatedData);\n\n    // Simulated model performance data\n    setModelPerformance({\n      accuracy: 0.85,\n      precision: 0.82,\n      recall: 0.88,\n      f1Score: 0.85,\n      auc: 0.91,\n    });\n\n    // Simulated clinical implications data\n    setClinicalImplications([\n      { aspect: 'Early Detection', impact: 8 },\n      { aspect: 'Treatment Planning', impact: 7 },\n      { aspect: 'Risk Stratification', impact: 9 },\n      { aspect: 'Patient Education', impact: 6 },\n      { aspect: 'Resource Allocation', impact: 5 },\n    ]);\n\n    // Simulated risk factors data\n    setRiskFactors([\n      { factor: 'Smoking', prevalence: 45 },\n      { factor: 'Diabetes', prevalence: 30 },\n      { factor: 'Obesity', prevalence: 35 },\n      { factor: 'Family History', prevalence: 25 },\n      { factor: 'High Cholesterol', prevalence: 40 },\n      { factor: 'High Blood Pressure', prevalence: 38 },\n    ]);\n\n  }, []);\n\n  const genderDistribution = data.reduce((acc, curr) => {\n    acc[curr.gender] = (acc[curr.gender] || 0) + 1;\n    return acc;\n  }, {});\n\n  const genderDistributionData = Object.entries(genderDistribution).map(([gender, count]) => ({\n    gender,\n    count,\n  }));\n\n  const GENDER_COLORS = { Male: '#0088FE', Female: '#FF69B4' };\n\n  const modelPerformanceData = Object.entries(modelPerformance).map(([metric, value]) => ({\n    metric,\n    value: value * 100, // Convert to percentage\n  }));\n\n  return (\n    <div className=\"flex flex-col items-center w-full max-w-7xl mx-auto p-4 bg-gray-900 text-white\">\n      <h1 className=\"text-3xl font-bold mb-8 font-mono\">Statistical Dashboard for Heart Disease Prediction System using Bayesian Networks</h1>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 w-full\">\n        <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4 font-mono\">Gender Distribution</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={genderDistributionData}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"count\"\n                label={({ gender, percent }) => `${gender} ${(percent * 100).toFixed(0)}%`}\n              >\n                {genderDistributionData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={GENDER_COLORS[entry.gender]} />\n                ))}\n              </Pie>\n              <Tooltip />\n              <Legend />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4 font-mono\">Blood Pressure Distribution</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <ComposedChart data={data}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"age\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Area type=\"monotone\" dataKey=\"bloodPressure\" fill=\"#8884d8\" stroke=\"#8884d8\" />\n              <Bar dataKey=\"bloodPressure\" barSize={20} fill=\"#413ea0\" />\n              <Line type=\"monotone\" dataKey=\"bloodPressure\" stroke=\"#ff7300\" />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4 font-mono\">Risk(Likelihood) vs Age</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={data}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"age\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"heartDiseaseRisk\" fill=\"#e36862\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4 font-mono\">Model Performance</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <RadarChart cx=\"50%\" cy=\"50%\" outerRadius=\"80%\" data={modelPerformanceData}>\n              <PolarGrid />\n              <PolarAngleAxis dataKey=\"metric\" />\n              <PolarRadiusAxis angle={30} domain={[0, 100]} />\n              <Radar name=\"Model\" dataKey=\"value\" stroke=\"#328744\" fill=\"#328744\" fillOpacity={0.6} />\n              <Tooltip />\n              <Legend />\n            </RadarChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4 font-mono\">Clinical Implications</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={clinicalImplications}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"aspect\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"impact\" fill=\"#384ec9\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4 font-mono\">Risk Factors</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={riskFactors} layout=\"vertical\">\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis type=\"number\" />\n              <YAxis dataKey=\"factor\" type=\"category\" />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"prevalence\" fill=\"#202324\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4 font-mono\">Prediction Accuracy</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <RadarChart cx=\"50%\" cy=\"50%\" outerRadius=\"80%\" data={predictionAccuracy}>\n              <PolarGrid />\n              <PolarAngleAxis dataKey=\"metric\" />\n              <PolarRadiusAxis angle={30} domain={[0, 100]} />\n              <Radar name=\"Accuracy\" dataKey=\"value\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.6} />\n              <Tooltip />\n              <Legend />\n            </RadarChart>\n          </ResponsiveContainer>\n        </div> */}\n      </div>\n\n      <div className=\"mt-8 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md w-full\">\n        <h2 className=\"text-2xl font-semibold mb-4 font-mono\">Inferences and Outcomes</h2>\n        <ul className=\"list-disc pl-5 space-y-2\">\n          <li>The Bayesian Network model demonstrated high accuracy (85%) in predicting heart disease risk.</li>\n          <li>Gender distribution analysis revealed potential differences in heart disease risk between males and females.</li>\n          <li>Blood pressure and age showed a strong correlation with heart disease risk.</li>\n          <li>The model's performance metrics (precision, recall, F1-score) indicate its reliability in clinical settings.</li>\n          <li>Early detection and risk stratification were identified as the most impactful clinical implications.</li>\n          <li>Smoking and high cholesterol emerged as the most prevalent risk factors in the study population.</li>\n          <li>The prediction accuracy radar graph illustrates the model's balanced performance across various metrics.</li>\n          <li>These findings suggest that the Bayesian Network approach is a promising tool for heart disease risk assessment and can potentially improve patient outcomes through early intervention and personalized treatment planning.</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;","import React from 'react';\nimport Dashboard from './Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);"],"sourceRoot":""}